{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub Policy Dashboard","text":""},{"location":"#overview","title":"Overview","text":"<p>This project contains a dashboard to monitor ONSDigital's compliance with ONS' GitHub Usage Policy. The dashboard interacts with various GitHub RESTful API endpoints to query each repository with a series of checks that align to aspects of the policy.</p> <p>The dashboard is written in Python and uses Streamlit to produce a quick, easy and responsive UI. This project also makes use of a library called Plotly to produce high quality and interactive graphs.</p> <p>Please Note: This project is a Proof of concept and may not comply with Civil Service/ONS best practices. This tool is only being used by a limited number of users.</p>"},{"location":"#techstack-overview","title":"Techstack Overview","text":""},{"location":"#streamlit","title":"Streamlit","text":"<p>Streamlit is a powerful web framework which promotes creating apps quickly and without the need of any frontend writing. This makes Streamlit well suited to the project due to the speed of development and heavy data focus. Streamlit also promotes interactivity within its apps which is crucial when making a dashboard as you want users to be able to play with the data to get the most from it. This project has been used as a proof of concept for Streamlit, testing its capabilities and potential for future projects. A small drawback is Streamlit's potential lack of accessibility. This project hasn't been accessibility tested but, due to its limited target audience, is still fit for purpose. Another limitation of the tool is its ability to be customised to look and feel like an ONS product. Streamlit offers customisation within its colour scheme and allows logos to be added, however it will still look like a Streamlit application.</p>"},{"location":"#plotly","title":"Plotly","text":"<p>Plotly is a graphing library used within the project. Plotly was chosen because of its high interactivity, ability to export and general ease of use alongside Streamlit. Other libraries, such as Matplotlib, were trialed alongside Plotly during early development. It was found that Plotly just generally suited Streamlit's feel and focus on interactivity, which is why it was chosen. Another advantage of Plotly was its incorporation with Dash, a dashboarding tool built on top of the Flask framework. This means that if Dash was to be used in the future (perhaps to onboard a dashboard onto the ONS Design System), we'd already have some knowledge on how to use it.</p>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>This project uses 4 major components:</p> <ul> <li>The Dashboard</li> <li>The Lambda Function</li> <li>The Policy Checks (policy_checks.py)</li> <li>The GitHub API Toolkit (stored in another repository - Repository Link)</li> </ul>"},{"location":"#the-dashboard","title":"The Dashboard","text":"<p>This component displays the data back to the user. The dashboard will gather all of the data from an S3 bucket.</p>"},{"location":"#the-lambda-function","title":"The Lambda Function","text":"<p>This component is responsible for collecting and maintaining the data from GitHub. The function collects information from the GitHub API through the use of the GitHub API Toolkit, applies a series of checks to the responses using <code>policy_checks.py</code> and then stores the information within an S3 bucket. </p>"},{"location":"#the-policy-checks","title":"The Policy Checks","text":"<p>This component contains all the business logic to query the data retrieved from GitHub. The script also contains the logic to retrieve the data using the toolkit. Each policy check is written in its own function, and should return true if the check is failed/breaks policy.</p>"},{"location":"#the-github-api-toolkit","title":"The GitHub API Toolkit","text":"<p>This component is an imported library which is shared across multiple GitHub tools. The toolkit allows applications to make authenticated requests to the GitHub API. It is imported and used in the Lambda function.</p>"},{"location":"#high-level-data-overview","title":"High Level Data Overview","text":"<p>The dashboard's dataset can be divided into 3 parts:</p> <ul> <li>Repository Checks</li> <li>Secret Scanning Alerts</li> <li>Dependabot Alerts</li> </ul> <p>Each part gets created by the Lambda function and stored in an S3 bucket for the dashboard to retrieve.</p>"},{"location":"#repository-checks","title":"Repository Checks","text":""},{"location":"#general-data-structure","title":"General Data Structure","text":"<p>This section of the dataset gets stored in <code>repositories.json</code>. It contains a list of repositories with information about them. The information for each repository includes:</p> <ul> <li>Repository Name</li> <li>Repository Type (i.e public, private or internal)</li> <li>Repository GitHub Link</li> <li>Statuses of each policy compliance check</li> </ul> <p>JSON Skeleton:</p> <pre><code>{\n    \"name\": &lt;string&gt;,\n    \"type\": &lt;string&gt;,\n    \"url\": &lt;string&gt;,\n    \"checklist\": {\n        \"inactive\": &lt;bool&gt;,\n        \"unprotected_branches\": &lt;bool&gt;,\n        \"unsigned_commits\": &lt;bool&gt;,\n        \"readme_missing\": &lt;bool&gt;,\n        \"license_missing\": &lt;bool&gt;,\n        \"pirr_missing\": &lt;bool&gt;,\n        \"gitignore_missing\": &lt;bool&gt;,\n        \"external_pr\": &lt;bool&gt;,\n        \"breaks_naming_convention\": &lt;bool&gt;,\n        \"secret_scanning_disabled\": &lt;bool&gt;,\n        \"dependabot_disabled\": &lt;bool&gt;\n    }\n}\n</code></pre> <p>JSON Example:</p> <pre><code>{\n    \"name\": \"github-policy-dashboard\",\n    \"type\": \"public\",\n    \"url\": \"https://github.com/ONS-Innovation/github-policy-dashboard\",\n    \"checklist\": {\n        \"inactive\": false,\n        \"unprotected_branches\": false,\n        \"unsigned_commits\": false,\n        \"readme_missing\": false,\n        \"license_missing\": true,\n        \"pirr_missing\": false,\n        \"gitignore_missing\": false,\n        \"external_pr\": true,\n        \"breaks_naming_convention\": false,\n        \"secret_scanning_disabled\": false,\n        \"dependabot_disabled\": false\n    }\n}\n</code></pre>"},{"location":"#policy-compliance-checks","title":"Policy Compliance Checks","text":""},{"location":"#existing-checks","title":"Existing Checks","text":"<p>Repositories currently have 11 different checks:</p> Check Name Description Inactive The repository has not been updated in the last year. Unprotected Branches The repository has unprotected branches. Unsigned Commits One of the last 15 commits to this repository is unsigned. Readme Missing The repository does not have a README file. License Missing The repository does not have a LICENSE file (Public Only). PIRR Missing The repository does not have a PIRR file (Private/Internal Only). Gitignore Missing The repository does not have a .gitignore file. External PR The repository has a pull request from a user which isn't a member of the organisation. Breaks Naming Conventions The repository name does not follow ONS naming convention (No Capitals, Special Characters or Spaces). Secret Scanning Disabled The repository does not have secret scanning enabled (Public Only due to GitHub Advanced Security). Dependabot Disabled The repository does not have dependabot enabled."},{"location":"#rulemap","title":"Rulemap","text":"<p>Compliance checks use a JSON file called <code>rulemap.json</code> to add some extra information about each check.</p> <p>JSON Skeleton:</p> <pre><code>[\n    {\n        \"name\": &lt;string&gt;,\n        \"description\": &lt;string&gt;,\n        \"is_security_rule\": &lt;bool&gt;,\n        \"is_policy_rule\": &lt;bool&gt;\n    },\n    ...\n]\n</code></pre> <p>Each rulemap element contains:</p> <ul> <li>the name of the check<ul> <li>This must match the name used in <code>repo_info</code> within <code>./aws_lambda/policy_checks.py</code> &gt; <code>get_repository_data()</code>.</li> </ul> </li> <li>a description of the check<ul> <li>This gets displayed to the end user of the dashboard.</li> </ul> </li> <li>whether the check is part of the security preset<ul> <li>If true, when the security preset button is clicked, the rule will be selected within the dropdown.</li> </ul> </li> <li>whether the check is part of the policy preset<ul> <li>If true, when the policy preset button is clicked, the rule will be selected within the dropdown.</li> </ul> </li> </ul> <p>JSON Example:</p> <p>The follow defines the External PR rule which is only part of the security preset.</p> <pre><code>[\n    ...\n    {\n        \"name\": \"external_pr\",\n        \"description\": \"The repository has a pull request from a user which isn't a member of the organisation.\",\n        \"is_security_rule\": true,\n        \"is_policy_rule\": false\n    },\n    ...\n]\n</code></pre>"},{"location":"#adding-new-checks","title":"Adding New Checks","text":"<p>To add a new change:</p> <ol> <li>Insert information about the new check into <code>rulemap.json</code>.</li> </ol> <p>i.e: for a check that checks if a repository is public</p> <pre><code>[\n    ...\n    {\n        \"name\": \"dependabot_disabled\",\n        \"description\": \"The repository does not have dependabot enabled.\",\n        \"is_security_rule\": true,\n        \"is_policy_rule\": true\n    },\n    {\n        \"name\": \"repository_public\",\n        \"description\": \"The repository is public\",\n        \"is_security_rule\": true,\n        \"is_policy_rule\": false\n    }\n]\n</code></pre> <ol> <li> <p>Add a function for the check into <code>./aws_lambda/policy_checks.py</code>.</p> </li> <li> <p>In <code>./aws_lambda/policy_checks.py</code> there is a function called <code>get_repository_data()</code>.</p> </li> </ol> <p>Within this function, edit <code>repo_info</code> to include the new check.</p> <p>i.e:</p> <p>Before:</p> <pre><code>repo_info = {\n    \"name\": repo[\"name\"],\n    \"type\": repo[\"visibility\"],\n    \"url\": repo[\"html_url\"],\n    \"checklist\": {\n        \"inactive\": check_inactive(repo),\n        \"unprotected_branches\": check_branch_protection(repo[\"branches_url\"].replace(\"{/branch}\", \"\"), gh),\n        \"unsigned_commits\": check_signed_commits(repo[\"commits_url\"].replace(\"{/sha}\", \"\"), gh),\n        \"readme_missing\": check_file_exists(repo[\"contents_url\"], gh, [\"README.md\", \"readme.md\", \"docs/README.md\", \"docs/readme.md\"]),\n        \"license_missing\": check_file_exists(repo[\"contents_url\"], gh, [\"LICENSE.md\", \"LICENSE\"]),\n        \"pirr_missing\": check_file_exists(repo[\"contents_url\"], gh, [\"PIRR.md\"]),\n        \"gitignore_missing\": check_file_exists(repo[\"contents_url\"], gh, [\".gitignore\"]),\n        \"external_pr\": check_external_pr(repo[\"pulls_url\"].replace(\"{/number}\", \"\"), repo[\"full_name\"], gh),\n        \"breaks_naming_convention\": check_breaks_naming(repo[\"name\"]),\n        \"secret_scanning_disabled\": check_secret_scanning_enabled(repo),\n        \"dependabot_disabled\": check_dependabot_enabled(gh, repo[\"url\"])\n    }\n}\n</code></pre> <p>With new check:</p> <pre><code>repo_info = {\n    \"name\": repo[\"name\"],\n    \"type\": repo[\"visibility\"],\n    \"url\": repo[\"html_url\"],\n    \"checklist\": {\n        \"inactive\": check_inactive(repo),\n        \"unprotected_branches\": check_branch_protection(repo[\"branches_url\"].replace(\"{/branch}\", \"\"), gh),\n        \"unsigned_commits\": check_signed_commits(repo[\"commits_url\"].replace(\"{/sha}\", \"\"), gh),\n        \"readme_missing\": check_file_exists(repo[\"contents_url\"], gh, [\"README.md\", \"readme.md\", \"docs/README.md\", \"docs/readme.md\"]),\n        \"license_missing\": check_file_exists(repo[\"contents_url\"], gh, [\"LICENSE.md\", \"LICENSE\"]),\n        \"pirr_missing\": check_file_exists(repo[\"contents_url\"], gh, [\"PIRR.md\"]),\n        \"gitignore_missing\": check_file_exists(repo[\"contents_url\"], gh, [\".gitignore\"]),\n        \"external_pr\": check_external_pr(repo[\"pulls_url\"].replace(\"{/number}\", \"\"), repo[\"full_name\"], gh),\n        \"breaks_naming_convention\": check_breaks_naming(repo[\"name\"]),\n        \"secret_scanning_disabled\": check_secret_scanning_enabled(repo),\n        \"dependabot_disabled\": check_dependabot_enabled(gh, repo[\"url\"]),\n        \"repository_public\": check_repository_public(gh, repo[\"visibility\"])\n    }\n}\n</code></pre> <p>Please Note: The key for the attrubute withing checklist must match the name used within <code>rulemap.json</code>.</p> <p>A new check should now be added.</p>"},{"location":"#secret-scanning-alerts","title":"Secret Scanning Alerts","text":"<p>This section of the dataset gets stored in <code>secret_scanning.json</code>. It contains a list of secret scanning alerts, for the organisation, which have been open for more than 5 days. </p> <p>Please note: The 5 day threashold is derrived from ONS' GitHub Usage Policy, clause 6.2.1. </p> <p>Each element contains the following:</p> <ul> <li>Repository Name</li> <li>Repository Type (i.e public, private or internal)</li> <li>Alert Information (formatted:  - ) <li>Repository GitHub Link</li> <p>JSON Skeleton:</p> <pre><code>{\n    \"repo\": &lt;string&gt;,\n    \"type\": &lt;string&gt;,\n    \"secret\": &lt;string&gt;,\n    \"link\": &lt;string&gt;\n}\n</code></pre> <p>JSON Example:</p> <pre><code>{\n    \"repo\": \"github-policy-dashboard\",\n    \"type\": \"public\",\n    \"secret\": \"Google API Key - &lt;key&gt;\",\n    \"link\": \"https://github.com/ONS-Innovation/github-policy-dashboard\"\n}\n</code></pre>"},{"location":"#dependabot-checks","title":"Dependabot Checks","text":"<p>This section of the dataset gets stored in <code>dependabot.json</code>. It contains a list of dependabot alerts for the organisation. </p> <p>Dependabot Alerts are picked up based on the following:</p> <ul> <li>Critical alerts open more than 5 days</li> <li>High alerts open more than 15 days</li> <li>Medium alerts open more than 60 days</li> <li>Low alerts open more than 90 days</li> </ul> <p>Please note: These are derived from ONS' GitHub Usage Policy, clause 6.2.2.</p> <p>Each element contains the following:</p> <ul> <li>Repository Name</li> <li>Repository Type (i.e public, private or internal)</li> <li>Dependency Name (i.e a Python package such as Boto3)</li> <li>Advisory</li> <li>Alert Severity (i.e critical or high)</li> <li>Number of Days Open</li> <li>Repository GitHub Link</li> </ul> <p>JSON Skeleton:</p> <pre><code>{\n    \"repo\": &lt;string&gt;,\n    \"type\": &lt;string&gt;,\n    \"dependency\": &lt;string&gt;,\n    \"advisory\": &lt;string&gt;,\n    \"severity\": &lt;string&gt;,\n    \"days_open\": &lt;int&gt;,\n    \"link\": &lt;string&gt;\n}\n</code></pre> <p>JSON Example:</p> <pre><code>{\n    \"repo\": \"github-policy-dashboard\",\n    \"type\": \"public\",\n    \"dependency\": \"Werkzeug\",\n    \"advisory\": \"Werkzeug debugger vulnerable to remote execution when interacting with attacker controlled domain\",\n    \"severity\": \"high\",\n    \"days_open\": 77,\n    \"link\": \"https://github.com/ONS-Innovation/github-policy-dashboard/security/dependabot/7\"\n}\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To setup and use the project, please refer to the READMEs placed within each module.</p> <ul> <li>Dashboard Setup</li> <li>Lambda Setup</li> </ul>"},{"location":"documentation/","title":"Documentation","text":"<p>This site uses MkDocs to build its documentation and GitHub Pages for hosting.</p>"},{"location":"documentation/#format","title":"Format","text":"<p>Documentation within this project follows the following pattern:</p> <ul> <li>A <code>README.md</code> for each component</li> <li>A <code>/docs</code> folder for the project</li> </ul> <p>Each <code>README.md</code> should contain:</p> <ul> <li>A description of what the component is/does</li> <li>A list of any prerequisites</li> <li>Setup instructions</li> <li>Execution instructions</li> <li>Deployment instructions</li> </ul> <p>The <code>/docs</code> folder should contain:</p> <ul> <li>A description of what the project is</li> <li>An overview of how the everything fits together in the project</li> <li>An explanation of the tech stack</li> <li>Details of the underlying dataset</li> </ul> <p>A majority of the information should reside within the <code>/docs</code> directory over the <code>README</code>. The <code>README</code>s in this project should be kept for concise instructions on how to use each component. Any detailed explanation should be kept within <code>/docs</code>.</p>"},{"location":"documentation/#updating-mkdocs-deployment","title":"Updating MkDocs Deployment","text":"<p>If changes are made within <code>/docs</code>, the GitHub Pages deployment will need to be updated. Assuming you have already installed MkDocs and Material for MkDocs, do the following:</p> <ol> <li> <p>Navigate to the projects root directory.</p> </li> <li> <p>Delete the existing <code>/mkdocs_deployment</code> directory.</p> </li> <li> <p>Build the MkDocs deployment.</p> </li> </ol> <pre><code>mkdocs build\n</code></pre> <ol> <li> <p>Rename the <code>/site</code> directory to <code>/mkdocs_deployment</code>. This allows git to track the build so GitHub Pages can redeploy it.</p> </li> <li> <p>Commit and Push changes.</p> </li> </ol> <p>Once completed, a GitHub Action will redeploy the new build to GitHub Pages.</p>"},{"location":"initial_scoping/","title":"Github Policy Dashboard Requirements","text":"<p>The dashboard's main purpose is to identify repositories/users which violate ONS' Github Usage Policy. The dashboard should be able to identify repositories created after a given date. The dashboard will then be used for manual action and you should be able to mark repositories/users as exempt for breaking a given policy (i.e if a repository is flagged for not having a .gitignore but it will never need one).</p> <p>Please Note: This document covers the initial requirement scoping for the project and may not hold true to updated versions of the dashboard. They are included in documentation to show some initial thought processes and requirements which may provide some useful background information.</p>"},{"location":"initial_scoping/#policy-tasks","title":"Policy Tasks","text":"Policy Clause Description Already Available? Implementation Needed? Potential Limitations Complexity (1-10) Time to Complete Security Importance Priority 2.1 Check that organisational email address is attached to member profiles N/A Yes Github API can only get user emails if they're provided in their public profile - most of the time this field is empty 8 ? High High if possible 2.2 Check that user profiles are filled out with information N/A No N/A N/A N/A 3. Check that all users who are members of the org should be there N/A Yes Will need another reference point to compare against Github 6 Depends on reference source High High if possible 4.1 All repos should be made in ONSdigital N/A No N/A N/A N/A N/A N/A 4.2 Check that repo names follow conventions (i.e hyphens/underscores, all lower case, etc.) N/A Yes None 2 1 Day Low Low 4.3 Check private/internal repos for a PIRR.md file. Should not be empty. N/A Yes None 4 2 Days (Will need to figure out repo content access through the API) Medium Medium 4.4 All repos should have a README.md N/A Yes None 3 1 Day Low Medium 4.5 Check public repos for a license file. Should not be empty. N/A Yes None 4 2 Days (Will need to figure out repo content access through the API) Low Medium 4.6 All repos should have a .gitignore N/A Yes None 2 1 Day Medium Medium 4.7 All repos should have good quality documentation N/A No Might be something for SDP - Could check if /docs is present N/A N/A N/A N/A 4.8 Any repository with no updates for 1 year and is no longer used should be archived N/A Yes None 2 1 Day High High 5.1 Check Team/Organisation naming N/A No None N/A N/A N/A N/A 5.2 Team Structure N/A No None N/A N/A N/A N/A 5.3 Code of Conduct N/A No None N/A N/A N/A N/A 5.4 Use PRs N/A No None N/A N/A N/A N/A 5.5 Check for PR's outside of organisation N/A Yes None 4 2 Days (Will need to figure out PR's using Github API) Low Nice to Have 5.6 Branch Usage N/A No None N/A N/A N/A N/A 5.7 Check Branch Protection Rules (Main Branch Only) are enforced N/A Yes None 4 2 Days (Will need to figure out branch protection enpoint) Medium Medium 5.8 Check that commits are signed N/A Yes None 4 2 Days (Will need to figure out commits endpoint) Medium Medium 6.1 Personal privacy settings N/A No None N/A N/A N/A N/A 6.2 Check that dependabot and secret scanning, etc are enabled Yes (organisation insights tab) No None N/A N/A N/A N/A 6.2.1~4 Check for any dependabot and security scanning alerts No Yes None 5 3 Days (Will need to figure out API endpoints for Dependabot and Scanning) High High 6.3 Compliance N/A No None N/A N/A <p>All other policy clauses are not relevant to the project and require no implementation.</p>"},{"location":"initial_scoping/#task-summary","title":"Task Summary","text":"<ul> <li>Highlight any users which do not have an ONS email added to their account</li> <li>Check that all org members should be there (Will require another reference)</li> <li>Highlight any repositories which break naming conventions (contains uppercase, special characters, etc.)</li> <li>Highlight any repos without:<ul> <li>README.md</li> <li>License file (public only)</li> <li>PIRR.md (private/internal only)</li> <li>.gitignore</li> </ul> </li> <li>Highlight any repos which haven't been updated for more than a year</li> <li>Highlight any repos with external pull requests</li> <li>Highlight any repos without branch protection rules on main branch</li> <li>Highlight any repos without signed commits</li> <li>Highlight any repos with Security Scanning/Dependabot alerts (SLO) (When to highlight specified in policy 6.2.1 &amp; 6.2.2)</li> </ul> <p>Repositories to be highlighted should be filtered by creation date. Any highlighted users/repos should be able to be marked as exempt for that alert.</p>"},{"location":"initial_scoping/#task-priority-list","title":"Task Priority List","text":"<ol> <li> <ul> <li>Highlight any users which do not have an ONS email added to their account</li> <li>Check that all org members should be there (Will require another reference)</li> </ul> </li> <li>Highlight any repos with Security Scanning/Dependabot alerts (SLO) (When to highlight specified in policy 6.2.1 &amp; 6.2.2)</li> <li>Highlight any repos which haven't been updated for more than a year</li> <li> <ul> <li>Highlight any repos without branch protection rules on main branch</li> <li>Highlight any repos without signed commits</li> </ul> </li> <li>Highlight any repos without:<ul> <li>README.md</li> <li>License file (public only)</li> <li>PIRR.md (private/internal only)</li> <li>.gitignore</li> </ul> </li> <li>Highlight any repos with external pull requests</li> <li>Highlight any repositories which break naming conventions (contains uppercase, special characters, etc.)</li> </ol>"},{"location":"initial_scoping/#tech-stack","title":"Tech Stack","text":"<p>This dashboard will probably be made using Python and Steamlit.</p>"},{"location":"initial_scoping/#notes","title":"Notes","text":"<p>Will need to have 2 sections, one high-level and one in-depth.</p>"},{"location":"screen_designs/","title":"GitHub Policy Dashboard Screen Designs","text":"<p>Below are the screen designs which were created between requirement scoping and development. These designs have been revised with stakeholders to provide a baseline for what the dashboard should look like. Not all design cues were carried into the final development and, ;ikewise to the initial scoping, may no longer fully represent the UI within the project.</p>"},{"location":"screen_designs/#repository-analysis","title":"Repository Analysis","text":""},{"location":"screen_designs/#slo-analysis","title":"SLO Analysis","text":""}]}